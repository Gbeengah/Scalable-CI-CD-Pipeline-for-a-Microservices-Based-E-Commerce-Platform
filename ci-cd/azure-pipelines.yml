trigger:
- main  # Automatically trigger the pipeline on commits to the main branch

variables:
  acrName: 'gbeengahdevacr'  # Azure Container Registry name (service connection)
  productImageName: 'product-service'  # Docker image name for product-service
  userImageName: 'user-service'  # Docker image name for user-service
  tag: '$(Build.BuildId)'  # Tag for Docker images

pool:
  name: 'Default'  # Use the Default pool containing self-hosted agents
  demands:
    - Agent.Name -equals vm-for-node-pool-agent  # Use your Azure VM agent

stages:
- stage: Build
  displayName: Build and Push Docker Images
  jobs:
  - job: Build
    displayName: Build and Push Docker Images to ACR
    steps:
    # Build and Push Product-Service Docker Image
    - script: |
        echo "Building Product-Service"
        cd product-service
        npm install
        npm run build
        cd ..
      displayName: 'Install Dependencies and Build Product-Service'

    - task: Docker@2
      displayName: 'Build and Push Product-Service Docker Image'
      inputs:
        containerRegistry: '$(acrName)'  # Service connection to ACR
        repository: '$(productImageName)'
        command: 'buildAndPush'
        Dockerfile: 'product-service/dockerfile'
        buildContext: 'product-service'
        tags: '$(tag)'

    # Build and Push User-Service Docker Image
    - script: |
        echo "Building User-Service"
        cd user-service
        npm install
        npm run build
        cd ..
      displayName: 'Install Dependencies and Build User-Service'

    - task: Docker@2
      displayName: 'Build and Push User-Service Docker Image'
      inputs:
        containerRegistry: '$(acrName)'  # Service connection to ACR
        repository: '$(userImageName)'
        command: 'buildAndPush'
        Dockerfile: 'user-service/dockerfile'
        buildContext: 'user-service'
        tags: '$(tag)'

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'aks-prod'  # Replace with your AKS environment name
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: 'Deploy to AKS'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'MyAKSCluster-default'  # Specify the service connection
              manifests: |
                kubernetes-manifests/product-service-deployment.yaml
                kubernetes-manifests/product-service-service.yaml
                kubernetes-manifests/user-service-deployment.yaml
                kubernetes-manifests/user-service-service.yaml
              containers: |
                $(acrName).azurecr.io/$(productImageName):$(tag)
                $(acrName).azurecr.io/$(userImageName):$(tag)
              imagePullSecrets: '$(acrName)'  # Reference the service connection for ACR